%% -*- mode: erlang -*-
{"Erlang/Erlang",
 {[{map,   {modfun, riak_kv_mapreduce, map_object_value},
    {struct,[{<<"sub">>,[<<"0">>]}]},false},
   {reduce,{modfun, riak_kv_mapreduce, reduce_string_to_integer},none,false},
   {reduce,{modfun, riak_kv_mapreduce, reduce_sum},              none,true}],
  simple}}.

%%incomplete%%{"JS/JS",
%%incomplete%% {[{map,    {jsfun, <<"Riak.mapValuesJson">>}, none, false},
%%incomplete%%   {reduce, {jsfun, <<"Riak.reduceSum">>},     none, true}],
%%incomplete%%  simple}}.
%%incomplete%%
%%incomplete%%{"JS/Erlang",
%%incomplete%% {[{map,    {jsfun, <<"Riak.mapValuesJson">>},       none, false},
%%incomplete%%   {reduce, {modfun, riak_kv_mapreduce, reduce_sum}, none, true}],
%%incomplete%%  simple}}.
%%incomplete%%
%%incomplete%%{"Erlang/JS",
%%incomplete%% {[{map,    {modfun, riak_kv_mapreduce, map_object_value},
%%incomplete%%    <<"filter_notfound">>, false},
%%incomplete%%   {reduce, {jsfun, <<"Riak.reduceSort">>},                none, true}],
%%incomplete%%  sorted}}.
%%incomplete%%
%%incomplete%%{"JS/Erlang/JS",
%%incomplete%% {[{map,    {jsfun, <<"Riak.mapValuesJson">>},        none, false},
%%incomplete%%   {reduce, {modfun, riak_kv_mapreduce, reduce_sort}, none, false},
%%incomplete%%   {reduce, {jsfun, <<"Riak.reduceSum">>},            none, true}],
%%incomplete%%  simple}}.
%%incomplete%%
%%incomplete%%{"Erlang/JS/Erlang",
%%incomplete%% {[{map, {modfun, riak_kv_mapreduce, map_object_value},
%%incomplete%%    <<"filter_notfound">>, false},
%%incomplete%%   {reduce, {jsanon,
%%incomplete%%             <<"function(v) {
%%incomplete%%                values = Riak.filterNotFound(v);
%%incomplete%%                return values.map(
%%incomplete%%                  function(value) {
%%incomplete%%                    if (typeof value === 'string') {
%%incomplete%%                      return JSON.parse(value);
%%incomplete%%                    } else {
%%incomplete%%                      return value;
%%incomplete%%                    }
%%incomplete%%                  });}">>},
%%incomplete%%                                                        none, false},
%%incomplete%%   {reduce, {modfun, riak_kv_mapreduce, reduce_sum},    none, true}],
%%incomplete%%  simple}}.
%%incomplete%%
%%incomplete%%{"Erlang/JS/JS",
%%incomplete%% {[{map, {modfun, riak_kv_mapreduce, map_object_value},
%%incomplete%%    <<"filter_notfound">>, false},
%%incomplete%%   {reduce, {jsanon,
%%incomplete%%             <<"function(v) {
%%incomplete%%                values = Riak.filterNotFound(v);
%%incomplete%%                return values.map(
%%incomplete%%                  function(value) {
%%incomplete%%                    if (typeof value === 'string') {
%%incomplete%%                      return JSON.parse(value);
%%incomplete%%                    } else {
%%incomplete%%                      return value;
%%incomplete%%                    }
%%incomplete%%                  });}">>},
%%incomplete%%                                                        none, false},
%%incomplete%%   {reduce, {jsfun, <<"Riak.reduceSum">>},              none, true}],
%%incomplete%%  simple}}.

{"Erlang map",
 {[{map, {modfun, riak_kv_mapreduce, map_object_value},
    <<"include_notfound">>, true}],
  map}}.

%%incomplete%%{"JS map",
%%incomplete%% {[{map, {jsfun, <<"Riak.mapValuesJson">>}, none, true}],
%%incomplete%%  map}}.
%%incomplete%%
%%incomplete%%{"Erlang/JS Link prev",
%%incomplete%% {[{link, '_', <<"prev">>,               false},
%%incomplete%%   {map, {jsanon,
%%incomplete%%          <<"function(v,d) {
%%incomplete%%                if (d == 'prev')
%%incomplete%%                   return [v.key];
%%incomplete%%                else
%%incomplete%%                   return [];
%%incomplete%%             }">>},
%%incomplete%%                                   none, true}],
%%incomplete%%  map}}.

{"Erlang/Erlang link prev",
{[{link, '_', <<"prev">>,               false},
  {map, {modfun, riak_kv_mapreduce, map_object_value},
   <<"include_notfound">>, true}],
 map}}.

% SLF: Hrmm, broken, should figure out why
%% {"Erlang/Erlang SLF hack 2",
%% {[{map,    {modfun, riak_kv_mapreduce, map_object_value},
%%    <<"filter_notfound">>, false},
%%   {reduce,{modfun, riak_kv_mapreduce, reduce_sort},              none,true}],
%%  simple}}.

